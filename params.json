{"name":"Mocker-data-generator","tagline":"A simplified way to generate masive mock data.","body":"# mocker-data-generator\r\n\r\nA simplified way to generate masive mock data based on a schema, and you can use super cool libraries like fakerJs and chanceJs to generate fake data.\r\n\r\n## Getting started\r\n\r\nInstall the module with: `npm install mocker-data-generator`\r\n\r\n```javascript\r\nvar user = {\r\n    firstName: {\r\n        faker: 'name.firstName'\r\n    },\r\n    lastName: {\r\n        faker: 'name.lastName'\r\n    },\r\n    country: {\r\n        faker: 'address.country'\r\n    },\r\n    createdAt: {\r\n        faker: 'date.past'\r\n    },\r\n    username:{\r\n        function: function() {\r\n            return this.object.lastName.substring(0, 5) + this.object.firstName.substring(0, 3) + Math.floor(Math.random() * 10)\r\n        }\r\n    }\r\n};\r\nvar group = {\r\n    description: {\r\n        faker: 'lorem.paragraph'\r\n    },\r\n    users: [{\r\n        function: function() {\r\n            return this.faker.random.arrayElement(this.db.users).username\r\n        },\r\n        length: 10,\r\n        fixedLength: false\r\n    }]\r\n};\r\nvar conditionalField = {\r\n    type:{\r\n        values: ['HOUSE', 'CAR', 'MOTORBIKE']\r\n    },\r\n    'object.type==\"HOUSE\",location':{\r\n        faker: 'address.city'\r\n    },\r\n    'object.type==\"CAR\"||object.type==\"MOTORBIKE\",speed':{\r\n        faker: 'random.number'\r\n    }\r\n};\r\n\r\nmocker()\r\n    .schema('user', user, 2)\r\n    .schema('group', group, 2)\r\n    .schema('conditionalField', conditionalField 2)\r\n    .build(function(data) {\r\n        console.log(util.inspect(data, { depth: 10 }))\r\n//This returns an object\r\n// {\r\n//      user:[array of users],\r\n//      group: [array of groups],\r\n//      conditionalField: [array of conditionalFields]\r\n// }\r\n        })\r\n```\r\n\r\n## Documentation\r\nData generation goes with model based composed by generators, the generators can have access to the data generated and to the entity generated. ***Generators run syncronously, take care of the related entities!!***\r\n\r\n#### Model definition\r\n\r\nEvery model should contains the specified fields. Key can be 2 types:\r\n\r\n- ***Normal string*** key: indicates the key.\r\n- ***Comaseparated string*** key: indicates that there is a conditional, before the coma you must specify a conditional (you have all level fields generated in this moment), then you must specify the field if the conditional is true see the example.\r\n\r\nInside every value you can put:\r\n\r\n- ***static***: For fixed fields\r\n\r\n    ```javascript\r\n        { static: 'hello im fixed field' }     \r\n    ```\r\n\r\n- ***incrementalId***: For incremental numeric ids, pass the start number to increment. If you put incrementalId = true it takes from 0 the ids.\r\n\r\n    ```javascript\r\n        { incrementalId: 0 }     \r\n    ```\r\n\r\n- ***funcion***: No params are passed, only context (```this```), in this you have ```{db, object, faker, chance}```, and you can use faker or chance functions, object (the specified model), db (actual data generated)\r\n\r\n    ```javascript\r\n        { function: function(){\r\n            //this.db\r\n            //this.object\r\n            //this.faker\r\n            //this.chance\r\n            return yourValue\r\n        } }\r\n\r\n        //OR:\r\n\r\n        { function(){\r\n            //this.db\r\n            //this.object\r\n            //this.faker\r\n            //this.chance\r\n            return yourValue\r\n        } }     \r\n    ```\r\n\r\n- ***faker***: you can use directly faker functions like: (note that, db (actual entities generated), object (actual entity generated) are injected), ***you must pass an exactly JSON syntax***:\r\n\r\n    ```javascript\r\n        { faker: 'lorem.words' }                            //Run faker.lorem.words()\r\n        { faker: 'lorem.words()' }                          //Run faker.lorem.words()\r\n        { faker: 'lorem.words(1)' }                         //Run faker.lorem.words(1)\r\n        { faker: 'integer({\"min\": 1, \"max\": 10})' }         //Run faker.lorem.words(1) and take the first\r\n        { faker: 'random.arrayElement(db.users)' }          //Run faker.arrayElement over a generated user entity\r\n        { faker: 'random.arrayElement(db.users)[\"userId\"]' }  //Run faker.arrayElement over a generated user entity and take the userId only\r\n    ```\r\n\r\n- ***chance***: you can use directly chance functions, you can do: (note that, db (actual entities generated), object (actual entity generated) are injected), ***you must pass an exactly JSON syntax***:\r\n\r\n    ```javascript\r\n        { chance: 'integer' }                                //Run chance.integer()\r\n        { chance: 'integer()' }                              //Run chance.integer()\r\n        { chance: 'integer({\"min\": 1, \"max\": 10})' }         //Run chance.integer({\"min\": 1, \"max\": 10})\r\n        { chance: 'street_suffixes()[0][\"name\"]' }           //Run chance.street_suffixes() takes first result and the name inside\r\n    ```\r\n\r\n- ***[Array]***: you can pass an array that indicates an array of data you can create, passing in the first field the generator (function, faker, or array(not Tested)), and in the second field pass a config object (length, fixedLentgh)\r\n   - ***length***: to know how many values\r\n   - ***fixedLength***: true to create always same amount of values in the array, false to generate a random number bettwen 0 and 'length' value. False by default.\r\n   - ***concat***: An stringuified array ex: '[object.id, db.users.id]'. This should be an evaluable string to concat with the array that are generating. Also takes in mind that if you have a fixedLength, should not increase the lenght.\r\n   - ***strictConcat***: true to remove duplicates in the concated string array, when it is calculated. False by default.\r\n\r\n    ```javascript\r\n    [{\r\n        //Any generator\r\n            //Faker  \r\n        faker: 'random.arrayElement(db.users).userId'\r\n            //Chance  \r\n        chance: 'integer'\r\n            //Function  \r\n        function: function (){ return /**/ }\r\n\r\n        //Array config\r\n        length: 10,\r\n        fixedLength: true\r\n\r\n        //Concat\r\n        concat: '[db.users[0].userId, db.users[1].userId]'\r\n        strictConcat: true\r\n    }]     \r\n    ```\r\n\r\n#### Optional fields\r\n- ***[virtual]***: Boolean, if you pass this option, this mean that this field will not appear at the output entity. But you can use during the generation.\r\n\r\n```javascript\r\n    {\r\n        //Any generator\r\n            //Faker  \r\n        faker: 'random.arrayElement(db.users)[userId]'\r\n            //Chance  \r\n        chance: 'integer'\r\n            //static\r\n        static: 'any static field'\r\n            //Function  \r\n        function: function (){ return /**/ }\r\n\r\n        //with the virtual option\r\n        virtual: true\r\n\r\n    }     \r\n```\r\n\r\n#### Data generation\r\nInitialize mocker with the config, and then generate any entity with promises style, use generate function that accepts the name of the model and the amount of data to generate. Like the example:\r\n\r\n```javascript\r\nmocker()\r\n    .schema('user', user, 2)\r\n    .schema('group', group, 2)\r\n    .schema('conditionalField', conditionalField 2)\r\n    .build(function(data) {\r\n        console.log(util.inspect(data, { depth: 10 }))\r\n//This returns an object\r\n// {\r\n//      user:[array of users],\r\n//      group: [array of groups],\r\n//      conditionalField: [array of conditionalFields]\r\n// }\r\n        })\r\n```\r\n\r\nYou can also pass instead of the number, an object with the a config, from now ```{uniqueField}```. If this field exists tells to the generator that instead of init a fixed length of data, generate an amount of data depending of the values of the field you will specify.\r\nYou have 2 way to deal with this, check the examples\r\nSee the output of this example:\r\n\r\n```javascript\r\n//\r\n// First way, using an 'values' embebbed object\r\n//\r\n\r\nvar cat = {\r\n    name: {\r\n        values: ['txuri', 'pitxi', 'kitty']\r\n    }\r\n};\r\nvar m = mocker()\r\n    .schema('cat', cat, 10)\r\n    .schema('cat2', cat, {uniqueField: 'name'})\r\n    .build(function(data){\r\n        console.log(util.inspect(data, {depth:10}))\r\n    })\r\n\r\n//\r\n// Second way, without 'values' embebbed.\r\n//\r\n\r\nvar cat = {\r\n    name: ['txuri', 'pitxi', 'kitty']\r\n};\r\nvar m = mocker()\r\n    .schema('cat', cat, 10)\r\n    .schema('cat2', cat, {uniqueField: 'name'})\r\n    .build(function(data){\r\n        console.log(util.inspect(data, {depth:10}))\r\n    })\r\n```\r\n\r\n#### More, Comming soon\r\n\r\n## Development\r\n\r\nRun ```npm install;npm run dev``` to watch the proyect, webpack compile the code automatically.\r\nRun ```npm build``` to build the normal and minified version.\r\n\r\n## Why not use json-schema-faker?\r\n\r\njson-schema-faker is awesome and works really nice, but i need a simplified and fast way to generate mock data for my proyects, so i created this.\r\n\r\n## License\r\nLicensed under the MIT license. 2015\r\n\r\n\r\n[npm-home-module]: https://www.npmjs.com/package/mocker-data-generator\r\n[appveyor]: https://ci.appveyor.com/project/danibram/mocker-data-generator\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}